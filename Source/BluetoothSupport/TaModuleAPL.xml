<?xml version="1.0" encoding="utf-8"?>
<!-- 
    ! Created By Taha HICHRI
    Copyright (c) Taha HICHRI <hishri.taha@gmail.com> - 2018
-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <init>
    <log text="Bluetooth Support inject"/>
  </init>

  <proguardAdditions>
    <insert><![CDATA[
        -keepattributes Signature
        -dontskipnonpubliclibraryclassmembers

        -keepclassmembers class com.epicgames.ue4.GameActivity {
            public <methods>;
            public <fields>;
        }
    ]]>
    </insert>
  </proguardAdditions>

  <prebuildCopies>
  </prebuildCopies>

  <gameActivityImportAdditions>
    <insert>
    <!-- Inject imports here. -->
        import android.content.pm.PackageManager;
        import android.widget.Toast;
        import android.bluetooth.BluetoothAdapter;
        import android.bluetooth.BluetoothManager;
        import android.content.Context;
        import android.content.Intent;
        import android.os.Looper;
        import android.os.Handler;
        import android.os.Build;
        import android.bluetooth.BluetoothDevice;
        import java.util.ArrayList;
        import java.util.Arrays;
        import java.util.Collections;
        import java.util.Date;
        import java.util.List;
        import java.util.UUID;
        import android.os.ParcelUuid;
        import android.bluetooth.le.ScanFilter;
        import android.bluetooth.le.ScanSettings;
        import androidx.annotation.RequiresApi;
        import android.bluetooth.BluetoothGatt;
        import android.bluetooth.BluetoothGattCallback;
        import android.bluetooth.BluetoothGattService;
        import android.bluetooth.BluetoothProfile;
        import android.bluetooth.le.BluetoothLeScanner;
        import android.bluetooth.le.ScanCallback;
        import android.bluetooth.le.ScanResult;
        import android.os.HandlerThread;

        import android.os.Bundle;
    </insert>
  </gameActivityImportAdditions>

  <androidManifestUpdates>
    <!-- Permissions here, I will add bluetooth manually. -->
    <!-- Needed regardless. -->
    <addPermission android:name="android.permission.BLUETOOTH" />
    
    <!-- Required solely for BLE, Bluetooth can be used for location, get coarse location. -->
    <addPermission android:name="android.permission.BLUETOOTH_ADMIN" />
    <addPermission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    
    <!-- Normally the low-energy feature is required, However, I am going to enable some features for devices
    which do not support BLE, such as manipulating the adapter and getting BL status. -->
    <addFeature android:name="android.hardware.bluetooth_le" android:required="false" />
  </androidManifestUpdates>

  <!--
  ####################### Activity/App lifecycle callbacks ######################
  # Optional additions to GameActivity onCreate in GameActivity.java.
  # There are a few checks and final value initializations, preferably I will add them here.
  -->
  <gameActivityOnCreateAdditions>
    <insert><![CDATA[
        final BluetoothManager bluetoothManager =
        (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
        // Accessing the device's default bluetooth adapter (API level 18).
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2)
        {
            taBluetoothAdapter = bluetoothManager.getAdapter();
        }

        // Nearby device discovery, connection, characteristic reading (API level 21).
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
        {
            // Builder will create a new ScanSettings instance with mentioned parameters.
            scanSettings = new ScanSettings.Builder()
            .setScanMode(ScanSettings.SCAN_MODE_LOW_POWER)
            .setReportDelay(1000)
            .build();
            
            discoveredLEResults = new ArrayList<>();  
        }
    ]]>
    </insert>
  </gameActivityOnCreateAdditions>

  <!-- Optional additions to GameActivity onDestroy in GameActivity.java. -->
  <gameActivityOnDestroyAdditions>
    <insert><![CDATA[
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && isScanning) {
            stopLEScan();
        }
        mHandler = null;
    ]]>
    </insert>
  </gameActivityOnDestroyAdditions>

  <!-- Optional additions to GameActivity onStart in GameActivity.java. -->
  <gameActivityOnStartAdditions>
  </gameActivityOnStartAdditions>

  <!-- Optional additions to GameActivity onStop in GameActivity.java. -->
  <gameActivityOnStopAdditions>
    <insert><![CDATA[
        if (discoveredLEResults != null) {
            discoveredLEResults.clear();
        }
    ]]>
    </insert>
  </gameActivityOnStopAdditions>

  <!-- Optional additions to GameActivity onPause in GameActivity.java. -->
  <gameActivityOnPauseAdditions>
    <insert><![CDATA[
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && isScanning) {
            stopLEScan();
        }
    ]]>
    </insert>
  </gameActivityOnPauseAdditions>

  <!-- Optional additions to GameActivity onResume in GameActivity.java. -->
  <gameActivityOnResumeAdditions>
  </gameActivityOnResumeAdditions>

  <!-- 
  # Methods, inner classes, and other the other additions. 
  --> 
  <gameActivityClassAdditions>
    <insert><![CDATA[
        // See onCreate additions. Will be set only when API is >= 18 and device has Bluetooth support.
        private BluetoothAdapter taBluetoothAdapter;
        // Perform scan related operations for Bluetooth LE devices.
        private BluetoothLeScanner taBluetoothLeScanner;
        // See onCreate additions (where the variables was initialized with empty array). 
        private List<CBluetoothDevice> discoveredLEResults;
        // See onCreate additions. Will be set only when API is >= 21.
        private ScanSettings scanSettings;

        // Intial scan for LE devices with, or without filters.
        // Will be initialized in startLEScan() and set to null in stopLEScan().
        BtleScanCallback mScanCallback;

        // When user connects to a particular device.
        BluetoothGatt taConnectGattDevice;

        // The system passes this constant back to you in your onActivityResult() implementation 
        // as the requestCode parameter.
        public static final int REQUEST_ENABLE_BT = 667;

        private boolean isScanning = false;
        
        private Handler mHandler = new Handler();


        // Callback c++.
        private static native void scanNativeResultCallback(String bluetoothDeviceStr);
        private static native void printDebugUEMessage(String msg);

        /**
        * ################### Available for all bluetooth-enabled devices ############
        * The plugin allows some basic bluetooth manipulating for non-supported devices.
        * I HAVE to make this check before any BLE-related work.
        * @return whether LE is supported.
        */
        public boolean isBluetoothLowEnergySupported()
        {
            return getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE) ;
        }

        /**
        * If Bluetooth adapter enabled.
        * @return True if enabled, false otherwise.
        */
        public boolean isBluetoothEnabled()
        {
            return (taBluetoothAdapter != null && taBluetoothAdapter.isEnabled());
        }

        /**
        * Enable bluetooth.
        */
        public void enableBluetooth()
        {
            // Displays a dialog requesting user permission to enable Bluetooth.
            // If taBluetoothAdapter is null then device don't have Bluetooth at all.
            if ( taBluetoothAdapter != null && !taBluetoothAdapter.isEnabled() )
            {
                Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
            }
        }

        /**
        * Disable bluetooth. 
        * !! Bluetooth should never be disabled without direct user consent !!
        */
        public void disableBluetooth()
        {
            if (taBluetoothAdapter != null && taBluetoothAdapter.isEnabled())
                taBluetoothAdapter.disable();
        }


        /**
        * ################ LE supported devices API >= 18 scan update ##############
        * Devices management.
        */


        /**
        * Scan for ANY LE-enabled device within the Bluetooth covered range.
        */
        @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
        public void startLEScan (int scanTimeoutMillisecond)
        {
            // Prevent user from calling scan multiple times.
            if( isScanning ) stopLEScan();
            
            // If this check fails then getBluetoothLeScanner() returns null.
            if ( !isBluetoothEnabled() || !isBluetoothLowEnergySupported() ) return;

            mScanCallback = new BtleScanCallback();
            taBluetoothLeScanner = taBluetoothAdapter.getBluetoothLeScanner();

            // For this method, list all available devices.
            isScanning = true;

            taBluetoothLeScanner.startScan(null,
                    scanSettings,
                    mScanCallback);

            mHandler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    stopLEScan();
                }
            }, scanTimeoutMillisecond);
        }

        /**
        * Called to scan for LE devices with a provided Service UUID only.
        * The filtered scan will save unneeded extra treatment especially with
        * a big number of devices around. It will do nothing if you don't specify any filters.
        * @param uuid of the service needed.
        * @param scanTimeoutMillisecond For how many milliseconds should I keep scanning?
        *                               The loop is better be managed BP-side.
        */
        @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
        public void startFilteredScan (int scanTimeoutMillisecond, final String uuidStr, final String deviceAddr)
        {
            // Prevent user from calling scan multiple times.
            if( isScanning ) stopLEScan();

            // If this check fails then getBluetoothLeScanner() returns null.
            if ( !isBluetoothEnabled() || !isBluetoothLowEnergySupported() ) return;

            ScanFilter scanFilter = null;
            // We allow both uuid and deviceAddr to be filtered.
            try {
                ScanFilter.Builder scanFilterBuilder = new ScanFilter.Builder();

                if (!uuidStr.equals(""))
                {
                    // We only want to scan for devices advertising our custom service.
                    UUID uuid = UUID.fromString(uuidStr);

                    scanFilterBuilder = scanFilterBuilder.setServiceUuid(new ParcelUuid(uuid));
                }

                if (!deviceAddr.equals(""))
                {
                    scanFilterBuilder = scanFilterBuilder.setDeviceAddress(deviceAddr);
                }

                // Building a scanFilter itself.
                if (!uuidStr.equals("") || !deviceAddr.equals("")) 
                {
                    scanFilter = scanFilterBuilder.build();
                }
            } catch (IllegalArgumentException illArgExc)
            {
                // Ignore.
            }

            if (scanFilter == null ) return;

            mScanCallback = new BtleScanCallback();
            taBluetoothLeScanner = taBluetoothAdapter.getBluetoothLeScanner();

            taBluetoothLeScanner.startScan(Arrays.asList(scanFilter),
                    scanSettings,
                    mScanCallback);

            isScanning = true;

            mHandler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    stopLEScan();
                }
            }, scanTimeoutMillisecond);
        }

        @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
        public void stopLEScan()
        {
            if (isScanning && isBluetoothEnabled() && taBluetoothLeScanner != null)
            {
                taBluetoothLeScanner.stopScan(mScanCallback);
            }

            mScanCallback = null;
            isScanning = false;
        }

        /**
        * If the device is scanning.
        */
        public boolean isScanning()
        {
            return isScanning;
        }

        /**
        * Implement methods to deliver BLE scan results (ScanCallback is abstract class).
        */
        @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
        private class BtleScanCallback extends ScanCallback
        {
            @Override
            public void onScanResult(int callbackType, ScanResult result)
            {
                // Delaying results of scan and getting a batch of results instead of a callback fuss.
                // This callback will never be called with delay.
            }

            @Override
            public void onBatchScanResults(List<ScanResult> results)
            {
                // Since a device might go offline without notification, no history will be kept.
                if ( results.size() > 0 ) discoveredLEResults.clear();
                // Go through the list of devices
                // with filters, I might get only one result. Stays valid.
                for (ScanResult result : results)
                {
                    addScanResult(result);
                }
            }

            @Override
            public void onScanFailed(int errorCode)
            {
                // TODO: Create a more good error handling. (maybe calling printDebugUEMessage or Log.e?)
            }
        }

        /**
        * Connecting to a GATT server.
        * This is called manually from blueprint. The connection requires device's address.
        */
        @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
        public void connectGattDevice(String deviceAddr)
        {
            if (isBluetoothEnabled()) {
                TaGattConnectCallback taGattConnectCallback = new TaGattConnectCallback();
                BluetoothDevice device = taBluetoothAdapter.getRemoteDevice(deviceAddr);
                taConnectGattDevice = device.connectGatt(getApplicationContext(), false, taGattConnectCallback);
            }
        }


        /**
        * ############################### SCAN, CONNECTION CALLBACKS ########################
        */
        @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
        private class TaGattConnectCallback extends BluetoothGattCallback
        {
            @Override
            public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState)
            {
                super.onConnectionStateChange(gatt, status, newState);
            }

            @Override
            public void onServicesDiscovered(BluetoothGatt gatt, int status)
            {
                super.onServicesDiscovered(gatt, status);
            }
        }

        @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
        private void addScanResult(ScanResult result)
        {
            CBluetoothDevice currentDevice;
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) // API level >= 26.
            {
                currentDevice = new CBluetoothDevice(
                    result.getDevice().getAddress(),
                    result.getRssi(),
                    result.getPeriodicAdvertisingInterval(),
                    result.getTxPower(),
                    result.isConnectable()
                );
            } else {
                currentDevice = new CBluetoothDevice(
                    result.getDevice().getAddress(),
                    result.getRssi()
                );
            }

            discoveredLEResults.add(currentDevice);
            // See AndroidGateway.cpp for this function implementation.
            scanNativeResultCallback(currentDevice.stringify()); 
        }

        /**
        * This is really important to adapt returned data (array of results) to C++ compatible list.
        */
        public String[] getDiscoveredDevices()
        {
            if ( discoveredLEResults != null )
            {
                String[] discoveredLEResultsArr = new String[discoveredLEResults.size()];
                
                for (int count = 0; count < discoveredLEResults.size(); count++)
                    discoveredLEResultsArr[count] = discoveredLEResults.get(count).stringify();

                return discoveredLEResultsArr;
            }

            return new String[]{};
        }

        public void clearDiscoveredDevices()
        {
            if ( discoveredLEResults != null ) discoveredLEResults.clear();
        }

        // This class will help in the passing of Objects via JNI.
        class CBluetoothDevice
        {
            String  address;
            int     rssi;
            int     periodicAdvertisingInterval = ScanResult.PERIODIC_INTERVAL_NOT_PRESENT; // 0
            int     txPower = ScanResult.TX_POWER_NOT_PRESENT; // 127
            boolean isConnectable = false;
            long    lastDiscovery;

            CBluetoothDevice(String addr, int rssi, int periodicAdvertisingInterval, int txPower, boolean isConnectable)
            {
                this.address = addr;
                this.rssi = rssi;
                this.periodicAdvertisingInterval = periodicAdvertisingInterval;
                this.txPower = txPower;
                this.isConnectable = isConnectable;
                lastDiscovery = new Date().getTime();
            }

            // API < 26
            CBluetoothDevice(String addr, int rssi)
            {
                this.address = addr;
                this.rssi = rssi;
                lastDiscovery = new Date().getTime();
            }

            // This string we pass to c++.
            public String stringify()
            {
                return ("" + address + 
                        "|" + rssi + 
                        "|" + periodicAdvertisingInterval + 
                        "|" + txPower + 
                        "|" + isConnectable + 
                        "|" + lastDiscovery);
            }
        }

    ]]>
    </insert>
  </gameActivityClassAdditions>
</root>